<?xml version="1.0" encoding="UTF-8"?>
<project name="SEO Metadata Extension Builder" description="Builds an extension.zip from a git repository" default="all">
	<property name="vendor-name" value="alfredoramos" />
	<property name="extension-name" value="seometadata" />
	<!--
	Only set this to "true" if you have dependencies in the composer.json,
	otherwise use "false".
	-->
	<property name="has-dependencies" value="false" />

	<!--
	Remove some unnecessary files/directories
	${dir}/ is the folder of your extension
	example: ext/${vendor-name}/${extension-name}/
	-->
	<target name="clean-package">
		<delete dir="${dir}/tests" />
		<delete dir="${dir}/travis" />
		<delete file="${dir}/.gitignore" />
		<delete file="${dir}/.gitattributes" />
		<delete file="${dir}/.travis.yml" />
		<delete file="${dir}/build.xml" />
		<delete file="${dir}/crowdin.yml" />
		<delete file="${dir}/phpunit.xml.dist" />
		<delete file="${dir}/README.md" />

		<phingcall target="clean-langs" />
	</target>

	<!-- DO NOT EDIT BELOW THIS LINE -->
	<property name="version" value="HEAD" override="true" />
	<property name="build-directory" value="build" override="true" />
	<property name="package-directory" value="${build-directory}/package/${vendor-name}/${extension-name}" />

	<!-- Remove incomplete translations. -->
	<property name="exclude-langs" value="" override="true" />

	<!-- These are the main targets which you will probably want to use -->
	<target name="all" depends="prepare-structure,package" />

	<!-- Remove incomplete language pack -->
	<target name="remove-lang">
		<if>
			<and>
				<not>
					<isfalse value="${lang}" />
				</not>
				<not>
					<equals arg1="${lang}" arg2="en" />
				</not>
			</and>
			<then>
				<delete dir="${package-directory}/language/${lang}" />
			</then>
		</if>
	</target>

	<target name="clean-lang">
		<echo msg="Replacing invalid characters: ${filename}" />
		<exec dir="${package-directory}/language" command="sed -ri 's|'\\\\\''|â€™|g' ${filename}" checkreturn="true" />
	</target>

	<!-- Clean up the language directory -->
	<target name="clean-langs">
		<if>
			<not>
				<isfalse value="${exclude-langs}" />
			</not>
			<then>
				<echo msg="Deleting incomplete languages" />
				<foreach list="${exclude-langs}" param="lang" target="remove-lang" />
			</then>
		</if>

		<foreach param="filename" target="clean-lang">
			<fileset dir="${package-directory}/language">
				<patternset>
					<include name="**/*.php" />
				</patternset>
			</fileset>
		</foreach>
	</target>

	<!-- Clean up the build directory -->
	<target name="clean">
		<delete dir="${build-directory}" />
	</target>

	<!-- Recreate the necessary folders -->
	<target name="prepare-structure" depends="clean">
		<mkdir dir="${build-directory}" />
		<mkdir dir="${build-directory}/checkout" />
		<mkdir dir="${build-directory}/package" />
		<mkdir dir="${build-directory}/package/${vendor-name}" />
		<mkdir dir="${build-directory}/package/${vendor-name}/${extension-name}" />
		<mkdir dir="${build-directory}/upload" />
	</target>

	<!-- The real packaging -->
	<target name="package">
		<echo msg="Extracting ${version}" />

		<phingcall target="git-checkout">
			<property name="archive-version" value="${version}" />
		</phingcall>

		<if>
			<equals arg1="${has-dependencies}" arg2="1" />
			<then>
				<echo msg="Installing dependencies" />
				<exec dir="${package-directory}" command="composer install --prefer-dist --no-dev" checkreturn="true" />
			</then>
		</if>

		<phingcall target="clean-package">
			<property name="dir" value="${package-directory}" />
		</phingcall>

		<!-- Try setting the package version property from composer.json -->
		<exec dir="${package-directory}"
			command='php -r "\$j = json_decode(file_get_contents(\"composer.json\")); echo (isset(\$j->version) ? \$j->version : \"${version}\");"'
			checkreturn="true"
			outputProperty='package-version' />

		<phingcall target="wrap-package">
			<property name="destination-filename" value="${build-directory}/upload/${vendor-name}_${extension-name}_${package-version}" />
		</phingcall>
	</target>

	<!-- Checkout a given version and install/clean the dependencies -->
	<target name="git-checkout">
		<echo msg="Getting archive for ${archive-version}" />

		<exec command="git archive ${archive-version} --format zip --output ${build-directory}/checkout/${archive-version}.zip"
			checkreturn="true" />
		<unzip file="${build-directory}/checkout/${archive-version}.zip" todir="${package-directory}" />
	</target>

	<!-- Create the zip and tar ball -->
	<target name="wrap-package">
		<echo msg="Creating archives (${vendor-name}/${extension-name} ${version})" />
		<zip basedir="${build-directory}/package/" destfile="${destination-filename}.zip" />
		<tar basedir="${build-directory}/package/" destfile="${destination-filename}.tar.gz" compression="gzip" />
		<tar basedir="${build-directory}/package/" destfile="${destination-filename}.tar.bz2" compression="bzip2" />

		<echo msg="Generating checksums" />
		<manifest checksum="sha512" file="${build-directory}/upload/checksums.sha512">
			<fileset dir="${build-directory}/upload/">
				<include name="*.zip" />
				<include name="*.tar.gz" />
				<include name="*.tar.bz2" />
			</fileset>
		</manifest>
	</target>
</project>
